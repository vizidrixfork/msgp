{{/* Gross switch */}}{{define "ElemTempl"}}{{if eq (.Type) 1 }}{{/*Ptr*/}}{{template "PtrTempl" .Ptr}}{{else if eq (.Type) 2 }}{{/*Slice*/}}{{template "SliceTempl" .Slice}}{{else if eq (.Type) 3 }}{{/*Struct*/}}{{template "StructTempl" .Struct}}{{else if eq (.Type) 4 }}{{/*Base*/}}{{template "BaseTempl" .Base}}{{else if eq (.Type) 5 }}{{template "MapTempl" .Map}}{{else if eq (.Type) 6 }}{{template "ArrayTempl" .Array}}{{end}}{{end}}

{{define "PtrTempl"}}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			return
		}
		{{.Varname}} = nil
	} else {
		if {{.Varname}} == nil {
			{{.Varname}} = new({{.Value.TypeName}})
		}
		{{template "ElemTempl" .Value}}	
	}
	{{end}}

{{define "MapTempl"}}
	var msz uint32
	msz, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	if {{.Varname}} == nil && msz > 0 {
		{{.Varname}} = make({{.TypeName}}, int(msz))
	} else if len({{.Varname}}) > 0 {
		for key, _ := range {{.Varname}} {
			delete({{.Varname}}, key)
		}
	}
	for inx := uint32(0); inx < msz; inx++ {
		var {{.Keyidx}} string 
		var {{.Validx}} {{.Value.TypeName}} {{/* TODO: *real* initialization here... this could fail. */}}
		{{.Keyidx}}, err = dc.ReadString()
		if err != nil {
			return
		}
		{{template "ElemTempl" .Value}}
		{{.Varname}}[{{.Keyidx}}] = {{.Validx}}
	}
	{{end}}

{{define "SliceTempl"}}
	var xsz uint32
	xsz, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if cap({{.Varname}}) >= int(xsz){
		{{.Varname}} = {{.Varname}}[0:int(xsz)]
	} else {
		{{.Varname}} = make({{.TypeName}}, int(xsz))
	}
	for {{.Index}} := range {{.Varname}} {
		{{template "ElemTempl" .Els}}
	}
	{{end}}

{{define "ArrayTempl"}}
	var asz uint32 
	asz, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if asz != {{.Size}} {
		err = msgp.ArrayError{Wanted: {{.Size}}, Got: asz}
		return
	}
	for {{.Index}} := range {{.Varname}} {
		{{template "ElemTempl" .Els}}
	}
	{{end}}

{{define "StructTempl"}}
	{{if .AsTuple}}
	{ {{/* tuples get their own blocks so that we don't clobber 'ssz'*/}}
		var ssz uint32 
		ssz, err = dc.ReadArrayHeader()
		if err != nil {
			return
		}
		if ssz != {{len .Fields}} {
			err = msgp.ArrayError{Wanted: {{len .Fields}}, Got: ssz}
			return
		}
		{{range .Fields}}{{template "ElemTempl" .FieldElem}}{{end}}
	}
	{{else}}
	var isz uint32
	isz, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for xplz:=uint32(0); xplz<isz; xplz++ {
		field, err = dc.ReadMapKey(field)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		{{range .Fields}}
		case "{{ .FieldTag}}":{{template "ElemTempl" .FieldElem}}
		{{end}}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	{{end}}
{{end}}

{{define "BaseTempl"}}{{/* TODO: make this less gross */}}
	{{if .Convert}}
	{ var tmp {{.BaseType}}{{end}}{{/* type lowering shim; also, begin new block */}}
	{{if eq (.Value) 1}}{{/* is []byte */}}
	{{if .Convert}}tmp, err = dc.ReadBytes([]byte({{.Varname}})){{else}}{{.Varname}}, err = dc.ReadBytes({{.Varname}}){{end}}
	{{else if .IsIdent}}
	err = {{.Varname}}.DecodeMsg(dc)
	{{else if .IsExt}}
	err = dc.ReadExtension({{.Varname}})
	{{else}}{{/* any other type */}}
	{{if .Convert}}tmp, err = dc.Read{{.BaseName}}(){{else}}{{.Varname}}, err = dc.Read{{.BaseName}}(){{end}}
	{{end}}
	{{if .Convert}}{{.Varname}} = {{.FromBase}}(tmp) }{{/* end block */}}{{end}}
	if err != nil {
		return
	}
	{{end}}
